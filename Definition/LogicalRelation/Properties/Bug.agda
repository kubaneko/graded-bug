------------------------------------------------------------------------
-- Equality in the logical relation is transitive
------------------------------------------------------------------------

{-# OPTIONS --hidden-argument-puns #-}

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Bug
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open import Definition.Untyped M hiding (_‚à∑_)
open import Definition.Typed R
open import Definition.LogicalRelation R

open import Tools.Nat hiding (_<_)

data Strength : Set where
  ùï§ ùï® : Strength

data BinderMode : Set where
  BMŒ† : BinderMode
  BMŒ£ : (s : Strength) ‚Üí BinderMode

data Kind : (ns : List Nat) ‚Üí Set a where
  Ukind : Nat ‚Üí Kind []
  Binderkind : (b : BinderMode) (p q : M) ‚Üí Kind (0 ‚à∑ 1 ‚à∑ [])

data GenTs (A : Nat ‚Üí Set a) : Nat ‚Üí List Nat ‚Üí Set a where
  []  : {n : Nat} ‚Üí GenTs A n []
  _‚à∑_ : {n b : Nat} {bs : List Nat} (t : A (b + n)) (ts : GenTs A n bs) ‚Üí GenTs A n (b ‚à∑ bs)

data Term (n : Nat) : Set a where
  var : (x : Fin n) ‚Üí Term n
  gen : {bs : List Nat} (k : Kind bs) (ts : GenTs Term n bs) ‚Üí Term n

data Con (A : Nat ‚Üí Set a) : Nat ‚Üí Set a where
  Œµ   :                             Con A 0        -- Empty context.
  _‚àô_ : {n : Nat} ‚Üí Con A n ‚Üí A n ‚Üí Con A (1+ n)   -- Context extension.

  data _‚ä¢_ (Œì : Con Term n) : Term n ‚Üí Set ‚Ñì where
    U‚±º     : ‚ä¢ Œì ‚Üí Œì ‚ä¢ U l
    Œ†Œ£‚±º    : Œì     ‚ä¢ F
           ‚Üí Œì ‚àô F ‚ä¢ G
           ‚Üí Œ†Œ£-allowed b p q
           ‚Üí Œì     ‚ä¢ Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ F ‚ñπ G
    univ   : Œì ‚ä¢ A ‚à∑ U l
           ‚Üí Œì ‚ä¢ A

data _‚ä¢_‚áí*_ (Œì : Con Term n) : Term n ‚Üí Term n ‚Üí Set ‚Ñì where
  id  : Œì ‚ä¢ A
      ‚Üí Œì ‚ä¢ A ‚áí* A
  _‚á®_ : Œì ‚ä¢ A  ‚áí  A‚Ä≤
      ‚Üí Œì ‚ä¢ A‚Ä≤ ‚áí* B
      ‚Üí Œì ‚ä¢ A  ‚áí* B

record _‚ä¢_:‚áí*:_ (Œì : Con Term n) (A B : Term n) : Set ‚Ñì where
  constructor [_,_,_]
  field
    ‚ä¢A : Œì ‚ä¢ A
    ‚ä¢B : Œì ‚ä¢ B
    D  : Œì ‚ä¢ A ‚áí* B

-- Type levels

TypeLevel : Set
TypeLevel = Nat

_<_ : (i j : TypeLevel) ‚Üí Set
i < j = i <‚Ä≤ j

data BindingType : Set a where
  BM : BinderMode ‚Üí (p q : M) ‚Üí BindingType

pattern BŒ† p q = BM BMŒ† p q
pattern BŒ†! = BŒ† _ _
pattern BŒ£ s p q = BM (BMŒ£ s) p q
pattern BŒ£! = BŒ£ _ _ _
pattern BŒ£ ∑ = BŒ£ ùï® _ _
pattern BŒ£À¢ = BŒ£ ùï§ _ _

‚ü¶_‚üß_‚ñπ_ : BindingType ‚Üí Term n ‚Üí Term (1+ n) ‚Üí Term n
‚ü¶ BŒ† p q   ‚üß F ‚ñπ G = Œ† p , q ‚ñ∑ F ‚ñπ G
‚ü¶ BŒ£ m p q ‚üß F ‚ñπ G = Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G

data Wk : Nat ‚Üí Nat ‚Üí Set where
  id    : {n : Nat}   ‚Üí Wk n n                    -- Œ∑ : Œì ‚â§ Œì.
  step  : {n m : Nat} ‚Üí Wk m n ‚Üí Wk (1+ m) n      -- If Œ∑ : Œì ‚â§ Œî then step Œ∑ : Œì‚àôA ‚â§ Œî.
  lift  : {n m : Nat} ‚Üí Wk m n ‚Üí Wk (1+ m) (1+ n) -- If Œ∑ : Œì ‚â§ Œî then lift Œ∑ : Œì‚àôA ‚â§ Œî‚àôA.

mutual
  wkGen : {m n : Nat} {bs : List Nat} (œÅ : Wk m n) (c : GenTs (Term) n bs) ‚Üí GenTs (Term) m bs
  wkGen œÅ []                = []
  wkGen œÅ (_‚à∑_ {b = b} t c) = (wk (liftn œÅ b) t) ‚à∑ (wkGen œÅ c)

  wk : {m n : Nat} (œÅ : Wk m n) (t : Term n) ‚Üí Term m
  wk œÅ (var x)   = var (wkVar œÅ x)
  wk œÅ (gen k c) = gen k (wkGen œÅ c)

data _‚à∑_‚äá_ : Wk m n ‚Üí Con Term m ‚Üí Con Term n ‚Üí Set a where
  id   :             id     ‚à∑ Œì            ‚äá Œì
  step : œÅ ‚à∑ Œî ‚äá Œì ‚Üí step œÅ ‚à∑ Œî ‚àô A        ‚äá Œì
  lift : œÅ ‚à∑ Œî ‚äá Œì ‚Üí lift œÅ ‚à∑ Œî ‚àô U.wk œÅ A ‚äá Œì ‚àô A

_[_]‚ÇÄ : (t : Term (1+ n)) (s : Term n) ‚Üí Term n
t [ s ]‚ÇÄ = t [ sgSubst s ]


data ‚ä¢_ : Con Term n ‚Üí Set ‚Ñì where
  Œµ   : ‚ä¢ Œµ
  _‚àô_ : ‚ä¢ Œì
      ‚Üí Œì ‚ä¢ A
      ‚Üí ‚ä¢ Œì ‚àô A

BindingType-allowed : BindingType ‚Üí Set a
BindingType-allowed (BM b p q) = Œ†Œ£-allowed b p q

data Neutral : Term n ‚Üí Set a where
  var       : (x : Fin n) ‚Üí Neutral (var x)

data Type {n : Nat} : Term n ‚Üí Set a where
  Œ†Œ£‚Çô    :             Type (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B)
  ‚Ñï‚Çô     :             Type ‚Ñï
  Empty‚Çô :             Type Empty
  Unit‚Çô  :             Type (Unit s)
  Id‚Çô    :             Type (Id A t u)
  ne     : Neutral t ‚Üí Type t

data Function {n : Nat} : Term n ‚Üí Set a where
  ne   : Neutral t ‚Üí Function t

pattern Œ†Œ£‚ü®_‚ü©_,_‚ñ∑_‚ñπ_ b p q F G = gen (Binderkind b p q) (F ‚à∑ G ‚à∑ [])
pattern Œ†_,_‚ñ∑_‚ñπ_ p q F G = gen (Binderkind BMŒ† p q) (F ‚à∑ G ‚à∑ [])
pattern Œ£À¢_,_‚ñ∑_‚ñπ_ p q F G = gen (Binderkind (BMŒ£ ùï§) p q) (F ‚à∑ G ‚à∑ [])
pattern Œ£ ∑_,_‚ñ∑_‚ñπ_ p q F G = gen (Binderkind (BMŒ£ ùï®) p q) (F ‚à∑ G ‚à∑ [])
pattern Œ£_,_‚ñ∑_‚ñπ_ p q F G = gen (Binderkind (BMŒ£ _) p q) (F ‚à∑ G ‚à∑ [])
pattern Œ£‚ü®_‚ü©_,_‚ñ∑_‚ñπ_ s p q F G =
  gen (Binderkind (BMŒ£ s) p q) (F ‚à∑ G ‚à∑ [])

record LogRelKit : Set (lsuc a) where
  constructor Kit
  field
    _‚ä©U_ : Con Term ‚Ñì ‚Üí Term ‚Ñì ‚Üí Set a
    _‚ä©B‚ü®_‚ü©_ : (Œì : Con Term ‚Ñì) (W : BindingType) ‚Üí Term ‚Ñì ‚Üí Set a
    -- TODO: Include _‚ä©ne_ and perhaps more fields here?
    -- _‚ä©ne_ : Con Term ‚Ñì ‚Üí Term ‚Ñì ‚Üí Set a

    _‚ä©_ : (Œì : Con Term ‚Ñì) ‚Üí Term ‚Ñì ‚Üí Set a
    _‚ä©_‚â°_/_ : (Œì : Con Term ‚Ñì) (A B : Term ‚Ñì) ‚Üí Œì ‚ä© A ‚Üí Set a
    _‚ä©_‚à∑_/_ : (Œì : Con Term ‚Ñì) (t A : Term ‚Ñì) ‚Üí Œì ‚ä© A ‚Üí Set a
    _‚ä©_‚â°_‚à∑_/_ : (Œì : Con Term ‚Ñì) (t u A : Term ‚Ñì) ‚Üí Œì ‚ä© A ‚Üí Set a

module LogRel (l : TypeLevel) (rec : ‚àÄ {l‚Ä≤} ‚Üí l‚Ä≤ <‚Ä≤ l ‚Üí LogRelKit) where

  -- Reducibility of Universe:

  -- Universe type
  record _‚ä©‚ÇÅU_ (Œì : Con Term ‚Ñì) (A : Term ‚Ñì) : Set a where
    constructor U·µ£
    field
      l‚Ä≤  : TypeLevel
      l<  : l‚Ä≤ < l
      ‚áí*U : Œì ‚ä¢ A :‚áí*: U l‚Ä≤

  -- Universe type equality
  _‚ä©‚ÇÅU‚â°_/_ : Con Term ‚Ñì ‚Üí Term ‚Ñì ‚Üí TypeLevel ‚Üí Set a
  Œì ‚ä©‚ÇÅU‚â° B / l‚Ä≤ = Œì ‚ä¢ B :‚áí*: U l‚Ä≤


  -- Universe term
  record _‚ä©‚ÇÅU_‚à∑U/_ {l‚Ä≤} (Œì : Con Term ‚Ñì) (t : Term ‚Ñì) (l< : l‚Ä≤ < l) : Set a where
    constructor U‚Çú
    open LogRelKit (rec l<)
    field
      A     : Term ‚Ñì
      d     : Œì ‚ä¢ t :‚áí*: A ‚à∑ U l‚Ä≤
      typeA : Type A
      A‚â°A   : Œì ‚ä¢ A ‚âÖ A ‚à∑ U l‚Ä≤
      [t]   : Œì ‚ä© t

  -- Universe term equality
  record _‚ä©‚ÇÅU_‚â°_‚à∑U/_ {l‚Ä≤} (Œì : Con Term ‚Ñì) (t u : Term ‚Ñì) (l< : l‚Ä≤ < l) : Set a where
    constructor U‚Çú‚Çå
    open LogRelKit (rec l<)
    field
      A B   : Term ‚Ñì
      d     : Œì ‚ä¢ t :‚áí*: A ‚à∑ U l‚Ä≤
      d‚Ä≤    : Œì ‚ä¢ u :‚áí*: B ‚à∑ U l‚Ä≤
      typeA : Type A
      typeB : Type B
      A‚â°B   : Œì ‚ä¢ A ‚âÖ B ‚à∑ U l‚Ä≤
      [t]   : Œì ‚ä© t
      [u]   : Œì ‚ä© u
      [t‚â°u] : Œì ‚ä© t ‚â° u / [t]

  mutual

    -- Reducibility of Binding types (Œ†, Œ£):

    -- B-type
    record _‚ä©‚ÇóB‚ü®_‚ü©_ (Œì : Con Term ‚Ñì) (W : BindingType) (A : Term ‚Ñì) : Set a where
      inductive
      constructor B·µ£
      eta-equality
      field
        F : Term ‚Ñì
        G : Term (1+ ‚Ñì)
        D : Œì ‚ä¢ A :‚áí*: ‚ü¶ W ‚üß F ‚ñπ G
        ‚ä¢F : Œì ‚ä¢ F
        ‚ä¢G : Œì ‚àô F ‚ä¢ G
        A‚â°A : Œì ‚ä¢ ‚ü¶ W ‚üß F ‚ñπ G ‚âÖ ‚ü¶ W ‚üß F ‚ñπ G
        [F] : ‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} ‚Üí œÅ ‚à∑ Œî ‚äá Œì ‚Üí ‚ä¢ Œî ‚Üí Œî ‚ä©‚Çó U.wk œÅ F
        [G] : ‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a : Term m}
            ‚Üí ([œÅ] : œÅ ‚à∑ Œî ‚äá Œì) (‚ä¢Œî : ‚ä¢ Œî)
            ‚Üí Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî
            ‚Üí Œî ‚ä©‚Çó U.wk (lift œÅ) G [ a ]‚ÇÄ
        G-ext : ‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a b}
              ‚Üí ([œÅ] : œÅ ‚à∑ Œî ‚äá Œì) (‚ä¢Œî : ‚ä¢ Œî)
              ‚Üí ([a] : Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
              ‚Üí ([b] : Œî ‚ä©‚Çó b ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
              ‚Üí Œî ‚ä©‚Çó a ‚â° b ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî
              ‚Üí Œî ‚ä©‚Çó U.wk (lift œÅ) G [ a ]‚ÇÄ ‚â° U.wk (lift œÅ) G [ b ]‚ÇÄ / [G] [œÅ] ‚ä¢Œî [a]
        ok : BindingType-allowed W

    -- B-type equality
    record _‚ä©‚ÇóB‚ü®_‚ü©_‚â°_/_ (Œì : Con Term ‚Ñì) (W : BindingType) (A B : Term ‚Ñì) ([A] : Œì ‚ä©‚ÇóB‚ü® W ‚ü© A) : Set a where
      inductive
      constructor B‚Çå
      eta-equality
      open _‚ä©‚ÇóB‚ü®_‚ü©_ [A]
      field
        F‚Ä≤     : Term ‚Ñì
        G‚Ä≤     : Term (1+ ‚Ñì)
        D‚Ä≤     : Œì ‚ä¢ B ‚áí* ‚ü¶ W ‚üß F‚Ä≤ ‚ñπ G‚Ä≤
        A‚â°B    : Œì ‚ä¢ ‚ü¶ W ‚üß F ‚ñπ G ‚âÖ ‚ü¶ W ‚üß F‚Ä≤ ‚ñπ G‚Ä≤
        [F‚â°F‚Ä≤] : {m : Nat} {œÅ : Wk m ‚Ñì} {Œî : Con Term m}
               ‚Üí ([œÅ] : œÅ ‚à∑ Œî ‚äá Œì) (‚ä¢Œî : ‚ä¢ Œî)
               ‚Üí Œî ‚ä©‚Çó U.wk œÅ F ‚â° U.wk œÅ F‚Ä≤ / [F] [œÅ] ‚ä¢Œî
        [G‚â°G‚Ä≤] : ‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a}
               ‚Üí ([œÅ] : œÅ ‚à∑ Œî ‚äá Œì) (‚ä¢Œî : ‚ä¢ Œî)
               ‚Üí ([a] : Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
               ‚Üí Œî ‚ä©‚Çó U.wk (lift œÅ) G [ a ]‚ÇÄ ‚â° U.wk (lift œÅ) G‚Ä≤ [ a ]‚ÇÄ / [G] [œÅ] ‚ä¢Œî [a]

    -- Term reducibility of Œ†-type
    _‚ä©‚ÇóŒ†_‚à∑_/_ : {‚Ñì : Nat} {p q : Mod} (Œì : Con Term ‚Ñì) (t A : Term ‚Ñì) ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ† p q ‚ü© A) ‚Üí Set a
    _‚ä©‚ÇóŒ†_‚à∑_/_ {‚Ñì} {p} {q} Œì t A (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) =
      ‚àÉ Œª f ‚Üí Œì ‚ä¢ t :‚áí*: f ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
            √ó Function f
            √ó Œì ‚ä¢ f ‚âÖ f ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
            √ó (‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a b}
              ([œÅ] : œÅ ‚à∑ Œî ‚äá Œì) (‚ä¢Œî : ‚ä¢ Œî)
              ([a] : Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
              ([b] : Œî ‚ä©‚Çó b ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
              ([a‚â°b] : Œî ‚ä©‚Çó a ‚â° b ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
              ‚Üí Œî ‚ä©‚Çó U.wk œÅ f ‚àò‚ü® p ‚ü© a ‚â° U.wk œÅ f ‚àò‚ü® p ‚ü© b ‚à∑ U.wk (lift œÅ) G [ a ]‚ÇÄ / [G] [œÅ] ‚ä¢Œî [a])
            √ó (‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a} ‚Üí ([œÅ] : œÅ ‚à∑ Œî ‚äá Œì) (‚ä¢Œî : ‚ä¢ Œî)
              ‚Üí ([a] : Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
              ‚Üí Œî ‚ä©‚Çó U.wk œÅ f ‚àò‚ü® p ‚ü© a ‚à∑ U.wk (lift œÅ) G [ a ]‚ÇÄ / [G] [œÅ] ‚ä¢Œî [a])
              {- NOTE(WN): Last 2 fields could be refactored to a single forall.
                           But touching this definition is painful, so only do it
                           if you have to change it anyway. -}
    -- Issue: Agda complains about record use not being strictly positive.
    --        Therefore we have to use √ó

    -- Term equality of Œ†-type
    _‚ä©‚ÇóŒ†_‚â°_‚à∑_/_ : {‚Ñì : Nat} {p q : Mod} (Œì : Con Term ‚Ñì) (t u A : Term ‚Ñì) ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ† p q ‚ü© A) ‚Üí Set a
    _‚ä©‚ÇóŒ†_‚â°_‚à∑_/_
      {‚Ñì} {p} {q} Œì t u A [A]@(B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) =
      ‚àÉ‚ÇÇ Œª f g ‚Üí Œì ‚ä¢ t :‚áí*: f ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
               √ó Œì ‚ä¢ u :‚áí*: g ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
               √ó Function f
               √ó Function g
               √ó Œì ‚ä¢ f ‚âÖ g ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
               √ó Œì ‚ä©‚ÇóŒ† t ‚à∑ A / [A]
               √ó Œì ‚ä©‚ÇóŒ† u ‚à∑ A / [A]
               √ó (‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a} ([œÅ] : œÅ ‚à∑ Œî ‚äá Œì) (‚ä¢Œî : ‚ä¢ Œî)
                 ([a] : Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî)
                 ‚Üí Œî ‚ä©‚Çó U.wk œÅ f ‚àò‚ü® p ‚ü© a ‚â° U.wk œÅ g ‚àò‚ü® p ‚ü© a ‚à∑ U.wk (lift œÅ) G [ a ]‚ÇÄ / [G] [œÅ] ‚ä¢Œî [a])
    -- Issue: Same as above.


    -- Term reducibility of Œ£-type
    _‚ä©‚ÇóŒ£_‚à∑_/_ :
      {p q : Mod} {m : Strength} (Œì : Con Term ‚Ñì) (t A : Term ‚Ñì)
      ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A) ‚Üí Set a
    _‚ä©‚ÇóŒ£_‚à∑_/_
      {p = p} {q = q} {m = m} Œì t A
      [A]@(B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) =
      ‚àÉ Œª u ‚Üí Œì ‚ä¢ t :‚áí*: u ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
            √ó Œì ‚ä¢ u ‚âÖ u ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
            √ó Œ£ (Product u) Œª pProd
            ‚Üí Œ£-prop m u Œì [A] pProd

    Œ£-prop : ‚àÄ {A p q} (m : Strength) (t : Term ‚Ñì) ‚Üí (Œì : Con Term ‚Ñì)
           ‚Üí ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A) ‚Üí (Product t) ‚Üí Set a
    Œ£-prop {p = p} ùï§ t Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) _ =
      Œ£ (Œì ‚ä©‚Çó fst p t ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)) Œª [fst] ‚Üí
      Œì ‚ä©‚Çó snd p t ‚à∑ U.wk (lift id) G [ fst p t ]‚ÇÄ /
        [G] id (wf ‚ä¢F) [fst]
    Œ£-prop
      {p = p} ùï® t Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
      (prod‚Çô {p = p‚Ä≤} {t = p‚ÇÅ} {u = p‚ÇÇ} {m = m}) =
           p PE.‚â° p‚Ä≤ √ó
           Œ£ (Œì ‚ä©‚Çó p‚ÇÅ ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)) Œª [p‚ÇÅ]
           ‚Üí Œì ‚ä©‚Çó p‚ÇÇ ‚à∑ U.wk (lift id) G [ p‚ÇÅ ]‚ÇÄ / [G] id (wf ‚ä¢F) [p‚ÇÅ]
           √ó m PE.‚â° ùï®
    Œ£-prop
      {p = p} {q = q}
      ùï® t Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) (ne x) =
      Œì ‚ä¢ t ~ t ‚à∑ Œ£ ∑ p , q ‚ñ∑ F ‚ñπ G

    -- Term equality of Œ£-type
    _‚ä©‚ÇóŒ£_‚â°_‚à∑_/_ :
      {p q : Mod} {m : Strength} (Œì : Con Term ‚Ñì) (t u A : Term ‚Ñì)
      ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A) ‚Üí Set a
    _‚ä©‚ÇóŒ£_‚â°_‚à∑_/_
      {p = p} {q = q} {m} Œì t u A
      [A]@(B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) =
      ‚àÉ‚ÇÇ Œª t‚Ä≤ u‚Ä≤ ‚Üí Œì ‚ä¢ t :‚áí*: t‚Ä≤ ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
                 √ó Œì ‚ä¢ u :‚áí*: u‚Ä≤ ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
                 √ó Œì ‚ä¢ t‚Ä≤ ‚âÖ u‚Ä≤ ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
                 √ó Œì ‚ä©‚ÇóŒ£ t ‚à∑ A / [A]
                 √ó Œì ‚ä©‚ÇóŒ£ u ‚à∑ A / [A]
                 √ó Œ£ (Product t‚Ä≤) Œª pProd
                 ‚Üí Œ£ (Product u‚Ä≤) Œª rProd
                 ‚Üí [Œ£]-prop m t‚Ä≤ u‚Ä≤ Œì [A] pProd rProd

    [Œ£]-prop :
      ‚àÄ {A p q} (m : Strength) (t r : Term ‚Ñì) (Œì : Con Term ‚Ñì)
      ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A) ‚Üí Product t ‚Üí Product r ‚Üí Set a
    [Œ£]-prop {p = p} ùï§ t r Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) _ _ =
      Œ£ (Œì ‚ä©‚Çó fst p t ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)) Œª [fstp]
      ‚Üí Œì ‚ä©‚Çó fst p r ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)
      √ó Œì ‚ä©‚Çó fst p t ‚â° fst p r ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)
      √ó Œì ‚ä©‚Çó snd p t ‚â° snd p r ‚à∑ U.wk (lift id) G [ fst p t ]‚ÇÄ
        / [G] id (wf ‚ä¢F) [fstp]
    [Œ£]-prop
      {p = p} ùï® t r Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
      (prod‚Çô {p = p‚Ä≤} {t = p‚ÇÅ} {u = p‚ÇÇ})
      (prod‚Çô {p = p‚Ä≥} {t = r‚ÇÅ} {u = r‚ÇÇ}) =
             p PE.‚â° p‚Ä≤ √ó p PE.‚â° p‚Ä≥ √ó
             Œ£ (Œì ‚ä©‚Çó p‚ÇÅ ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)) Œª [p‚ÇÅ] ‚Üí
             Œ£ (Œì ‚ä©‚Çó r‚ÇÅ ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)) Œª [r‚ÇÅ]
             ‚Üí (Œì ‚ä©‚Çó p‚ÇÇ ‚à∑ U.wk (lift id) G [ p‚ÇÅ ]‚ÇÄ / [G] id (wf ‚ä¢F) [p‚ÇÅ])
             √ó (Œì ‚ä©‚Çó r‚ÇÇ ‚à∑ U.wk (lift id) G [ r‚ÇÅ ]‚ÇÄ / [G] id (wf ‚ä¢F) [r‚ÇÅ])
             √ó (Œì ‚ä©‚Çó p‚ÇÅ ‚â° r‚ÇÅ ‚à∑ U.wk id F / [F] id (wf ‚ä¢F))
             √ó (Œì ‚ä©‚Çó p‚ÇÇ ‚â° r‚ÇÇ ‚à∑ U.wk (lift id) G [ p‚ÇÅ ]‚ÇÄ / [G] id (wf ‚ä¢F) [p‚ÇÅ])
    [Œ£]-prop
      ùï® t r Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
      (prod‚Çô {t = p‚ÇÅ} {u = p‚ÇÇ}) (ne y) =
      Lift a ‚ä•
    [Œ£]-prop
      ùï® t r Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok)
      (ne x) (prod‚Çô {t = r‚ÇÅ} {u = r‚ÇÇ}) =
      Lift a ‚ä•
    [Œ£]-prop
      {p = p} {q = q} ùï® t r Œì
      (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) (ne x) (ne y) =
        Œì ‚ä¢ t ~ r ‚à∑ Œ£ ∑ p , q ‚ñ∑ F ‚ñπ G

    -- Logical relation definition
    data _‚ä©‚Çó_ (Œì : Con Term ‚Ñì) : Term ‚Ñì ‚Üí Set a where
      U·µ£  : ‚àÄ {A} ‚Üí Œì ‚ä©‚ÇÅU A ‚Üí Œì ‚ä©‚Çó A
      ne  : ‚àÄ {A} ‚Üí Œì ‚ä©ne‚ü® l ‚ü© A ‚Üí Œì ‚ä©‚Çó A
      B·µ£  : ‚àÄ {A} W ‚Üí Œì ‚ä©‚ÇóB‚ü® W ‚ü© A ‚Üí Œì ‚ä©‚Çó A

    _‚ä©‚Çó_‚â°_/_ : (Œì : Con Term ‚Ñì) (A B : Term ‚Ñì) ‚Üí Œì ‚ä©‚Çó A ‚Üí Set a
    Œì ‚ä©‚Çó A ‚â° B / U·µ£ (U·µ£ l‚Ä≤ _ _) = Œì ‚ä©‚ÇÅU‚â° B / l‚Ä≤
    Œì ‚ä©‚Çó A ‚â° B / ne neA = Œì ‚ä©ne‚ü® l ‚ü© A ‚â° B / neA
    Œì ‚ä©‚Çó A ‚â° B / B·µ£ W BA = Œì ‚ä©‚ÇóB‚ü® W ‚ü© A ‚â° B / BA
      where open LogRelKit (rec l<)

    _‚ä©‚Çó_‚à∑_/_ : (Œì : Con Term ‚Ñì) (t A : Term ‚Ñì) ‚Üí Œì ‚ä©‚Çó A ‚Üí Set a
    Œì ‚ä©‚Çó t ‚à∑ A / U·µ£ p = Œì ‚ä©‚ÇÅU t ‚à∑U/ _‚ä©‚ÇÅU_.l< p
    Œì ‚ä©‚Çó t ‚à∑ A / ne neA = Œì ‚ä©ne‚ü® l ‚ü© t ‚à∑ A / neA
    Œì ‚ä©‚Çó t ‚à∑ A / B·µ£ BŒ†! Œ†A  = Œì ‚ä©‚ÇóŒ† t ‚à∑ A / Œ†A
    Œì ‚ä©‚Çó t ‚à∑ A / B·µ£ BŒ£! Œ£A  = Œì ‚ä©‚ÇóŒ£ t ‚à∑ A / Œ£A
      where open LogRelKit (rec l<)

    _‚ä©‚Çó_‚â°_‚à∑_/_ : (Œì : Con Term ‚Ñì) (t u A : Term ‚Ñì) ‚Üí Œì ‚ä©‚Çó A ‚Üí Set a
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / U·µ£ (U·µ£ l‚Ä≤ l< ‚ä¢Œì) = Œì ‚ä©‚ÇÅU t ‚â° u ‚à∑U/ l<
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / ne neA = Œì ‚ä©ne‚ü® l ‚ü© t ‚â° u ‚à∑ A / neA
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / B·µ£ BŒ†! Œ†A = Œì ‚ä©‚ÇóŒ† t ‚â° u ‚à∑ A / Œ†A
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / B·µ£ BŒ£! Œ£A  = Œì ‚ä©‚ÇóŒ£ t ‚â° u ‚à∑ A / Œ£A
      where open LogRelKit (rec l<)

    kit : LogRelKit
    kit = Kit _‚ä©‚ÇÅU_ _‚ä©‚ÇóB‚ü®_‚ü©_ _‚ä©‚ÇóId_
              _‚ä©‚Çó_ _‚ä©‚Çó_‚â°_/_ _‚ä©‚Çó_‚à∑_/_ _‚ä©‚Çó_‚â°_‚à∑_/_

open LogRel public
  using
    (U·µ£; ‚Ñï·µ£; Empty·µ£; Unit·µ£; ne; B·µ£; B‚Çå; Id·µ£; Id‚Çå; emb; U‚Çú; U‚Çú‚Çå;
     module _‚ä©‚ÇÅU_; module _‚ä©‚ÇÅU_‚à∑U/_; module _‚ä©‚ÇÅU_‚â°_‚à∑U/_;
     module _‚ä©‚ÇóB‚ü®_‚ü©_; module _‚ä©‚ÇóB‚ü®_‚ü©_‚â°_/_;
     module _‚ä©‚ÇóId_; module _‚ä©‚ÇóId_‚â°_/_)

mutual
  kit : TypeLevel ‚Üí LogRelKit
  kit ‚Ñì = LogRel.kit ‚Ñì kit-helper

  kit-helper : {n m : TypeLevel} ‚Üí m < n ‚Üí LogRelKit
  kit-helper {m = m} ‚â§‚Ä≤-refl = kit m
  kit-helper (‚â§‚Ä≤-step p) = kit-helper p

_‚ä©‚ü®_‚ü©_ : (Œì : Con Term ‚Ñì) (l : TypeLevel) ‚Üí Term ‚Ñì ‚Üí Set a
Œì ‚ä©‚ü® l ‚ü© A = Œì ‚ä© A where open LogRelKit (kit l)

-- Transitivty of term equality.
transEqTerm :  {n : Nat} ‚Üí ‚àÄ {Œì : Con Term n} {l A t u v}
              ([A] : Œì ‚ä©‚ü® l ‚ü© A)
            ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / [A]
            ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A / [A]
            ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A / [A]

transEqTerm (U·µ£‚Ä≤ l‚Ä≤ (‚â§‚Ä≤-step s) D)
            (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB t‚â°u [t] [u] [t‚â°u])
            (U‚Çú‚Çå A‚ÇÅ B‚ÇÅ d‚ÇÅ d‚ÇÅ‚Ä≤ typeA‚ÇÅ typeB‚ÇÅ t‚â°u‚ÇÅ [t]‚ÇÅ [u]‚ÇÅ [t‚â°u]‚ÇÅ) =
              lemma (transEqTerm
              (U·µ£‚Ä≤ l‚Ä≤ s D) (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB t‚â°u [t] [u] [t‚â°u]) {!!})
            where
              lemma : {‚Ñì : Nat} {Œì : Con Term ‚Ñì} {t v A : Term ‚Ñì} {l‚Ä≤ n : TypeLevel} {D : Œì ‚ä¢ A :‚áí*: U l‚Ä≤} {s : l‚Ä≤ < n} ‚Üí
                Œì ‚ä©‚ü® n ‚ü© t ‚â° v ‚à∑ A / U·µ£‚Ä≤ l‚Ä≤ s D ‚Üí Œì ‚ä©‚ü® Nat.suc n ‚ü© t ‚â° v ‚à∑ A / U·µ£‚Ä≤ l‚Ä≤ (‚â§‚Ä≤-step s) D
              lemma = {!!}
transEqTerm
  (B·µ£‚Ä≤ (BŒ£ ùï® p‚Ä≤ q) F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
  (Œ£‚Çú‚Çå p r d d‚Ä≤ (ne x) _ p‚âÖr [t] [u] p~r) = {!!}
transEqTerm = {!!}
