------------------------------------------------------------------------
-- Equality in the logical relation is transitive
------------------------------------------------------------------------

{-# OPTIONS --hidden-argument-puns #-}

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Bug
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open import Definition.Untyped M hiding (_‚à∑_)
open import Definition.LogicalRelation R

open import Tools.Nat hiding (_<_)

-- Transitivty of term equality.
transEqTerm :  {n : Nat} ‚Üí ‚àÄ {Œì : Con Term n} {l A t u v}
              ([A] : Œì ‚ä©‚ü® l ‚ü© A)
            ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / [A]
            ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A / [A]
            ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A / [A]

transEqTerm (U·µ£‚Ä≤ l‚Ä≤ (‚â§‚Ä≤-step s))
            (U‚Çú‚Çå )
            (U‚Çú‚Çå ) =
              lemma (transEqTerm
              (U·µ£‚Ä≤ l‚Ä≤ s) U‚Çú‚Çå {!!})
            where
              lemma : {‚Ñì : Nat} {Œì : Con Term ‚Ñì} {t v A : Term ‚Ñì} {l‚Ä≤ n : TypeLevel} {s : l‚Ä≤ < n} ‚Üí
                Œì ‚ä©‚ü® n ‚ü© t ‚â° v ‚à∑ A / U·µ£‚Ä≤ l‚Ä≤ s ‚Üí Œì ‚ä©‚ü® Nat.suc n ‚ü© t ‚â° v ‚à∑ A / U·µ£‚Ä≤ l‚Ä≤ (‚â§‚Ä≤-step s)
              lemma = {!!}
transEqTerm
  (B·µ£‚Ä≤ (BŒ£ ùï® p‚Ä≤ q) F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] _)
  (Œ£‚Çú‚Çå p r d d‚Ä≤ (ne x) _ p‚âÖr [t] [u] p~r) = {!!}
transEqTerm = {!!}
