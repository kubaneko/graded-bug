------------------------------------------------------------------------
-- Escaping the logical relation
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Cumulativity
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M hiding (_‚à∑_; K)
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Properties.Reflexivity R

open import Tools.Empty
open import Tools.Function
open import Tools.Nat hiding (_<_)
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n : Nat
    Œì : Con Term n
    A B t u : Term n
    l : TypeLevel
    b : BinderMode
    s : Strength
    p q : M

mutual
  -- Well-formness is cumulative
  cumul : ‚àÄ {l l‚Ä≤ A} ‚Üí l < l‚Ä≤ ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí  Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A
  cumul ‚â§‚Ä≤-refl ‚ä©Ty = cumulStep ‚ä©Ty
  cumul (‚â§‚Ä≤-step l<) ‚ä©Ty = cumulStep (cumul l< ‚ä©Ty)

  cumulStep : ‚àÄ {l A} ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí  Œì ‚ä©‚ü® 1+ l ‚ü© A
  cumulStep (U·µ£‚Ä≤ l‚Ä≤ l< ‚áí*U) = U·µ£‚Ä≤ l‚Ä≤ (‚â§‚Ä≤-step l<) ‚áí*U
  cumulStep (‚Ñï·µ£ x) =  ‚Ñï·µ£ x
  cumulStep (Empty·µ£ x) =  Empty·µ£ x
  cumulStep (Unit·µ£ x) =  Unit·µ£ x
  cumulStep (ne‚Ä≤ K D neK K‚â°K) = ne‚Ä≤ K D neK K‚â°K
  cumulStep (B·µ£‚Ä≤ W F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok) =  (B·µ£‚Ä≤ W F G D ‚ä¢F ‚ä¢G A‚â°A (Œª x x‚ÇÅ ‚Üí {!!}) {!!} G-ext ok)
  cumulStep (Id·µ£ (Id·µ£ Ty lhs rhs ‚áí*Id ‚ä©Ty ‚ä©lhs ‚ä©rhs)) =  Id·µ£
          (Id·µ£ Ty lhs rhs ‚áí*Id (cumul ‚â§‚Ä≤-refl ‚ä©Ty) (cumulTerm ‚â§‚Ä≤-refl  ‚ä©Ty ‚ä©lhs) (cumulTerm ‚â§‚Ä≤-refl  ‚ä©Ty ‚ä©rhs))
  cumulStep (emb l< [A]) = emb (‚â§‚Ä≤-step l<) [A]

  cumulTerm : ‚àÄ {l l‚Ä≤ A t} ‚Üí (l< : l < l‚Ä≤) ‚Üí ([A] : Œì ‚ä©‚ü® l ‚ü© A)
                ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / [A]
                ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A / cumul l< [A]
  cumulTerm ‚â§‚Ä≤-refl ‚ä©Ty ‚ä©Tm = cumulTermStep ‚ä©Ty ‚ä©Tm 
  cumulTerm (‚â§‚Ä≤-step l<) ‚ä©Ty ‚ä©Tm = cumulTermStep (cumul l< ‚ä©Ty) (cumulTerm l< ‚ä©Ty ‚ä©Tm)

  cumulTermStep : ‚àÄ {l A t} ‚Üí ([A] : Œì ‚ä©‚ü® l ‚ü© A)
                ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / [A]
                ‚Üí Œì ‚ä©‚ü® 1+ l ‚ü© t ‚à∑ A / cumulStep [A]
  cumulTermStep (U·µ£ x) (U‚Çú A d typeA A‚â°A [t]) = U‚Çú A d typeA A‚â°A [t]
  cumulTermStep (‚Ñï·µ£ x) ‚ä©Tm = ‚ä©Tm
  cumulTermStep (Empty·µ£ x) ‚ä©Tm = ‚ä©Tm
  cumulTermStep (Unit·µ£ x) ‚ä©Tm = ‚ä©Tm
  cumulTermStep (ne x) (ne‚Çú k d nf) = ne‚Çú k d nf
  cumulTermStep (B·µ£ W x) k = {!!}
  cumulTermStep (Id·µ£ x) (fst‚ÇÅ , snd‚ÇÅ) =  fst‚ÇÅ , {!!}
  cumulTermStep (emb l< [A]) k = k

  cumulEq :
    ‚àÄ {l l‚Ä≤ A B} ‚Üí (l< : l < l‚Ä≤) ‚Üí
    (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B / (cumul l< ‚ä©A)
  cumulEq ‚â§‚Ä≤-refl ‚ä©A eq = cumulEqStep ‚ä©A eq
  cumulEq (‚â§‚Ä≤-step l<) ‚ä©A eq = cumulEqStep (cumul l< ‚ä©A) (cumulEq l< ‚ä©A eq)

  cumulEqStep : ‚àÄ {l A B} ‚Üí (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
                  Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A ‚Üí
                  Œì ‚ä©‚ü® 1+ l ‚ü© A ‚â° B / cumulStep ‚ä©A
  cumulEqStep (U·µ£ x) eq = eq
  cumulEqStep (‚Ñï·µ£ x) eq = eq
  cumulEqStep (Empty·µ£ x) eq = eq
  cumulEqStep (Unit·µ£ x) eq = eq
  cumulEqStep (ne x) (ne‚Çå M D‚Ä≤ neM K‚â°M) = ne‚Çå M D‚Ä≤ neM K‚â°M
  cumulEqStep (B·µ£ W x) (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) = B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]
  cumulEqStep (Id·µ£ x) (Id‚Çå Ty‚Ä≤ lhs‚Ä≤ rhs‚Ä≤ ‚áí*Id‚Ä≤ Ty‚â°Ty‚Ä≤ lhs‚â°lhs‚Ä≤ rhs‚â°rhs‚Ä≤ lhs‚â°rhs‚Üílhs‚Ä≤‚â°rhs‚Ä≤ lhs‚Ä≤‚â°rhs‚Ä≤‚Üílhs‚â°rhs) =
    Id‚Çå Ty‚Ä≤ lhs‚Ä≤ rhs‚Ä≤ ‚áí*Id‚Ä≤ (cumulEq ‚â§‚Ä≤-refl {!!} Ty‚â°Ty‚Ä≤) (cumulTermEq ‚â§‚Ä≤-refl {!!} lhs‚â°lhs‚Ä≤)
    (cumulTermEq ‚â§‚Ä≤-refl {!!} rhs‚â°rhs‚Ä≤) (Œª x1 ‚Üí  cumulEqStep {!!} (lhs‚â°rhs‚Üílhs‚Ä≤‚â°rhs‚Ä≤ {!!})) Œª x1 ‚Üí cumulEqStep {!!} (lhs‚Ä≤‚â°rhs‚Ä≤‚Üílhs‚â°rhs {!!})
  cumulEqStep (emb l< [A]) eq = eq

  cumulTermEq :
      ‚àÄ {l l‚Ä≤ A t u} ‚Üí (l< : l < l‚Ä≤) ‚Üí
      (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©A ‚Üí
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A / cumul l< ‚ä©A
  cumulTermEq ‚â§‚Ä≤-refl ‚ä©A teq = cumulTermEqStep ‚ä©A teq
  cumulTermEq (‚â§‚Ä≤-step l<) ‚ä©A teq = cumulTermEqStep (cumul l< ‚ä©A) (cumulTermEq l< ‚ä©A teq)

  cumulTermEqStep : ‚àÄ {l A t u} ‚Üí (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
                  Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©A ‚Üí
                  Œì ‚ä©‚ü® 1+ l ‚ü© t ‚â° u ‚à∑ A / cumulStep ‚ä©A
  cumulTermEqStep (U·µ£ x) (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B [t] [u] [t‚â°u]) = U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B [t] [u] [t‚â°u]
  cumulTermEqStep (‚Ñï·µ£ x) teq = teq
  cumulTermEqStep (Empty·µ£ x) teq = teq
  cumulTermEqStep (Unit·µ£ x) teq = teq
  cumulTermEqStep (ne x) (ne‚Çú‚Çå k m d d‚Ä≤ nf) = ne‚Çú‚Çå k m d d‚Ä≤ nf
  cumulTermEqStep (B·µ£ W x) teq = {!!}
  cumulTermEqStep (Id·µ£ x) teq = {!!}
  cumulTermEqStep (emb l< [A]) teq = teq
