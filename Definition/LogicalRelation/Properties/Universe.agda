------------------------------------------------------------------------
-- Lemmata relating to terms of the universe type
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Universe
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}

open import Definition.Untyped M hiding (_‚à∑_)
open import Definition.Typed R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Properties.Escape R
open import Definition.LogicalRelation.Properties.Cumulativity R
open import Definition.LogicalRelation.Irrelevance R

open import Tools.Nat hiding (_<_; _‚â§_)
open import Tools.Product

private
  variable
    n l‚Ä≤ : Nat
    Œì : Con Term n

-- Helper function for reducible terms of type U for specific type derivations.
univEq‚Ä≤ :
  ‚àÄ {l l‚Ä≤ t A} ([U] : Œì ‚ä©‚ü® l ‚ü©U A) ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / U-intr [U] ‚Üí
  ‚àÉ Œª l‚Ä≥ ‚Üí l‚Ä≥ ‚â§ l‚Ä≤ ‚Üí Œì ‚ä©‚ü® l‚Ä≥ ‚ü© A
univEq‚Ä≤ (noemb (U·µ£ l l< ‚ä¢Œì)) (U‚Çú A‚ÇÅ d typeA A‚â°A [A]) = l , (Œª x ‚Üí U·µ£‚Ä≤ {!!} {!!} {!!})
univEq‚Ä≤ (emb ‚â§‚Ä≤-refl x) [A] = univEq‚Ä≤ x [A]
univEq‚Ä≤ (emb (‚â§‚Ä≤-step l<) x) [A] = univEq‚Ä≤ (emb l< x) [A]

-- Reducible terms of type U are reducible types.
univEq :
  ‚àÄ {l t A} ([U] : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / [U] ‚Üí
  ‚àÉ Œª l‚Ä≥ ‚Üí l‚Ä≥ ‚â§ l‚Ä≤ ‚Üí Œì ‚ä©‚ü® l‚Ä≥ ‚ü© t
univEq [U] [A] = univEq‚Ä≤ {!U-elim ? [U]!} {!irrelevanceTerm [U] (U-intr (U-elim [U])) [A]!}

-- univEq‚Ä≤ (U-elim [U])
--                          (irrelevanceTerm [U] (U-intr (U-elim [U])) [A])

-- Helper function for reducible term equality of type U for specific type derivations.
univEqEq‚Ä≤ : ‚àÄ {l l‚Ä≤ A B} ([U] : Œì ‚ä©‚ü® l ‚ü©U (U l‚Ä≤)) ([A] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A)
         ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚à∑ (U l‚Ä≤) / U-intr [U]
         ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B / [A]
univEqEq‚Ä≤ (noemb (U·µ£ l‚Ä≤ l< ‚áí*U)) [A] (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B [t] [u] [t‚â°u]) =  irrelevanceEq {![t]!} [A] [t‚â°u]
univEqEq‚Ä≤ (emb x [U]) [t] t‚â°v = univEqEq‚Ä≤ {!x!} {!!} {!!}
-- univEqEq‚Ä≤ (noemb (U·µ£ 0 l< ‚ä¢Œì)) [t]
--           (U‚Çú‚Çå A‚ÇÅ B‚ÇÅ d d‚Ä≤ typeA typeB A‚â°B [t] [u] [t‚â°u]) =
--   irrelevanceEq [t] [A] [t‚â°u]
-- univEqEq‚Ä≤ (emb 0<1 x) [A] [A‚â°B] = univEqEq‚Ä≤ x [A] [A‚â°B]

-- Reducible term equality of type U is reducible type equality.
univEqEq : ‚àÄ {l l‚Ä≤ t v} ([U] : Œì ‚ä©‚ü® l ‚ü© (U l‚Ä≤)) ([t] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t)
         ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ (U l‚Ä≤) / [U]
         ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° v / [t]
univEqEq [U] [t] [t‚â°v] =
  let [U]‚Ä≤ = U-elim (id (escape [U])) [U]
      [t‚â°v]‚Ä≤ = irrelevanceEqTerm [U] (U-intr [U]‚Ä≤) [t‚â°v]
  in univEqEq‚Ä≤ [U]‚Ä≤ [t] [t‚â°v]‚Ä≤
