------------------------------------------------------------------------
-- The logical relation for reducibility
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation
  {a} {Mod : Set a}
  {ùïÑ : Modality Mod}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped Mod as U hiding (_‚à∑_; K)
open import Definition.Typed.Properties R
open import Definition.Typed R
open import Definition.Typed.Weakening R

open import Tools.Empty
open import Tools.Function
open import Tools.Level
open import Tools.Nat using (Nat; 1+; _<‚Ä≤_; ‚â§‚Ä≤-step; ‚â§‚Ä≤-refl)
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Unit

private
  variable
    p q : Mod
    ‚Ñì l : Nat
    Œì Œî : Con Term ‚Ñì
    t t‚Ä≤ u u‚Ä≤ : Term _
    œÅ : Wk _ _

-- The different cases of the logical relation are spread out through out
-- this file. This is due to them having different dependencies.

-- We will refer to expressions that satisfies the logical relation as reducible.


TypeLevel : Set
TypeLevel = Nat

_<_ : (i j : TypeLevel) ‚Üí Set
i < j = i <‚Ä≤ j

-- Ordering of type levels.

data _‚â§_ (l : TypeLevel) : TypeLevel ‚Üí Set where
  refl : l ‚â§ l
  emb  : ‚àÄ {l‚Ä≤} ‚Üí l < l‚Ä≤ ‚Üí l ‚â§ l‚Ä≤

record LogRelKit : Set (lsuc a) where
  constructor Kit
  field
    _‚ä©U_ : Con Term ‚Ñì ‚Üí Term ‚Ñì ‚Üí Set a
    _‚ä©B‚ü®_‚ü©_ : (Œì : Con Term ‚Ñì) (W : BindingType) ‚Üí Term ‚Ñì ‚Üí Set a

    _‚ä©_ : (Œì : Con Term ‚Ñì) ‚Üí Term ‚Ñì ‚Üí Set a
    _‚ä©_‚à∑_/_ : (Œì : Con Term ‚Ñì) (t A : Term ‚Ñì) ‚Üí Œì ‚ä© A ‚Üí Set a
    _‚ä©_‚â°_‚à∑_/_ : (Œì : Con Term ‚Ñì) (t u A : Term ‚Ñì) ‚Üí Œì ‚ä© A ‚Üí Set a

module LogRel (l : TypeLevel) (rec : ‚àÄ {l‚Ä≤} ‚Üí l‚Ä≤ <‚Ä≤ l ‚Üí LogRelKit) where

  -- Reducibility of Universe:

  -- Universe type
  record _‚ä©‚ÇÅU_ (Œì : Con Term ‚Ñì) (A : Term ‚Ñì) : Set a where
    constructor U·µ£
    field
      l‚Ä≤  : TypeLevel
      l<  : l‚Ä≤ < l


  -- Universe term
  record _‚ä©‚ÇÅU_‚à∑U/_ {l‚Ä≤} (Œì : Con Term ‚Ñì) (t : Term ‚Ñì) (l< : l‚Ä≤ < l) : Set a where
    constructor U‚Çú
    open LogRelKit (rec l<)

  -- Universe term equality
  record _‚ä©‚ÇÅU_‚â°_‚à∑U/_ {l‚Ä≤} (Œì : Con Term ‚Ñì) (t u : Term ‚Ñì) (l< : l‚Ä≤ < l) : Set a where
    constructor U‚Çú‚Çå
    open LogRelKit (rec l<)



  mutual

    -- Reducibility of Binding types (Œ†, Œ£):

    -- B-type
    record _‚ä©‚ÇóB‚ü®_‚ü©_ (Œì : Con Term ‚Ñì) (W : BindingType) (A : Term ‚Ñì) : Set a where
      inductive
      constructor B·µ£
      eta-equality
      field
        F : Term ‚Ñì
        G : Term (1+ ‚Ñì)
        D : Œì ‚ä¢ A :‚áí*: ‚ü¶ W ‚üß F ‚ñπ G
        ‚ä¢F : Œì ‚ä¢ F
        ‚ä¢G : Œì ‚àô F ‚ä¢ G
        A‚â°A : Œì ‚ä¢ ‚ü¶ W ‚üß F ‚ñπ G ‚âÖ ‚ü¶ W ‚üß F ‚ñπ G
        [F] : ‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} ‚Üí œÅ ‚à∑ Œî ‚äá Œì ‚Üí ‚ä¢ Œî ‚Üí Œî ‚ä©‚Çó U.wk œÅ F
        [G] : ‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a : Term m}
            ‚Üí ([œÅ] : œÅ ‚à∑ Œî ‚äá Œì) (‚ä¢Œî : ‚ä¢ Œî)
            ‚Üí Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [œÅ] ‚ä¢Œî
            ‚Üí Œî ‚ä©‚Çó U.wk (lift œÅ) G [ a ]‚ÇÄ
        ok : BindingType-allowed W

    -- Term reducibility of Œ£-type
    _‚ä©‚ÇóŒ£_‚à∑_/_ :
      {p q : Mod} {m : Strength} (Œì : Con Term ‚Ñì) (t A : Term ‚Ñì)
      ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A) ‚Üí Set a
    _‚ä©‚ÇóŒ£_‚à∑_/_
      {p = p} {q = q} {m = m} Œì t A
      [A]@(B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) =
      ‚àÉ Œª u ‚Üí Œì ‚ä¢ t :‚áí*: u ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
            √ó Œì ‚ä¢ u ‚âÖ u ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
            √ó Œ£ (Product u) Œª pProd
            ‚Üí Œ£-prop m u Œì [A] pProd

    Œ£-prop : ‚àÄ {A p q} (m : Strength) (t : Term ‚Ñì) ‚Üí (Œì : Con Term ‚Ñì)
           ‚Üí ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A) ‚Üí (Product t) ‚Üí Set a
    Œ£-prop {p = p} ùï§ t Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) _ =
      Œ£ (Œì ‚ä©‚Çó fst p t ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)) Œª [fst] ‚Üí
      Œì ‚ä©‚Çó snd p t ‚à∑ U.wk (lift id) G [ fst p t ]‚ÇÄ /
        [G] id (wf ‚ä¢F) [fst]
    Œ£-prop
      {p = p} ùï® t Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
      (prod‚Çô {p = p‚Ä≤} {t = p‚ÇÅ} {u = p‚ÇÇ} {m = m}) =
           p PE.‚â° p‚Ä≤ √ó
           Œ£ (Œì ‚ä©‚Çó p‚ÇÅ ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)) Œª [p‚ÇÅ]
           ‚Üí Œì ‚ä©‚Çó p‚ÇÇ ‚à∑ U.wk (lift id) G [ p‚ÇÅ ]‚ÇÄ / [G] id (wf ‚ä¢F) [p‚ÇÅ]
           √ó m PE.‚â° ùï®
    Œ£-prop
      {p = p} {q = q}
      ùï® t Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) (ne x) =
      Œì ‚ä¢ t ~ t ‚à∑ Œ£ ∑ p , q ‚ñ∑ F ‚ñπ G

    -- Term equality of Œ£-type
    _‚ä©‚ÇóŒ£_‚â°_‚à∑_/_ :
      {p q : Mod} {m : Strength} (Œì : Con Term ‚Ñì) (t u A : Term ‚Ñì)
      ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A) ‚Üí Set a
    _‚ä©‚ÇóŒ£_‚â°_‚à∑_/_
      {p = p} {q = q} {m} Œì t u A
      [A]@(B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) =
      ‚àÉ‚ÇÇ Œª t‚Ä≤ u‚Ä≤ ‚Üí Œì ‚ä¢ t :‚áí*: t‚Ä≤ ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
                 √ó Œì ‚ä¢ u :‚áí*: u‚Ä≤ ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
                 √ó Œì ‚ä¢ t‚Ä≤ ‚âÖ u‚Ä≤ ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
                 √ó Œì ‚ä©‚ÇóŒ£ t ‚à∑ A / [A]
                 √ó Œì ‚ä©‚ÇóŒ£ u ‚à∑ A / [A]
                 √ó Œ£ (Product t‚Ä≤) Œª pProd
                 ‚Üí Œ£ (Product u‚Ä≤) Œª rProd
                 ‚Üí [Œ£]-prop m t‚Ä≤ u‚Ä≤ Œì [A] pProd rProd

    [Œ£]-prop :
      ‚àÄ {A p q} (m : Strength) (t r : Term ‚Ñì) (Œì : Con Term ‚Ñì)
      ([A] : Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A) ‚Üí Product t ‚Üí Product r ‚Üí Set a
    [Œ£]-prop {p = p} ùï§ t r Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) _ _ =
      Œ£ (Œì ‚ä©‚Çó fst p t ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)) Œª [fstp]
      ‚Üí Œì ‚ä©‚Çó fst p r ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)
      √ó Œì ‚ä©‚Çó fst p t ‚â° fst p r ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)
      √ó Œì ‚ä©‚Çó snd p t ‚â° snd p r ‚à∑ U.wk (lift id) G [ fst p t ]‚ÇÄ
        / [G] id (wf ‚ä¢F) [fstp]
    [Œ£]-prop
      {p = p} ùï® t r Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
      (prod‚Çô {p = p‚Ä≤} {t = p‚ÇÅ} {u = p‚ÇÇ})
      (prod‚Çô {p = p‚Ä≥} {t = r‚ÇÅ} {u = r‚ÇÇ}) =
             p PE.‚â° p‚Ä≤ √ó p PE.‚â° p‚Ä≥ √ó
             Œ£ (Œì ‚ä©‚Çó p‚ÇÅ ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)) Œª [p‚ÇÅ] ‚Üí
             Œ£ (Œì ‚ä©‚Çó r‚ÇÅ ‚à∑ U.wk id F / [F] id (wf ‚ä¢F)) Œª [r‚ÇÅ]
             ‚Üí (Œì ‚ä©‚Çó p‚ÇÇ ‚à∑ U.wk (lift id) G [ p‚ÇÅ ]‚ÇÄ / [G] id (wf ‚ä¢F) [p‚ÇÅ])
             √ó (Œì ‚ä©‚Çó r‚ÇÇ ‚à∑ U.wk (lift id) G [ r‚ÇÅ ]‚ÇÄ / [G] id (wf ‚ä¢F) [r‚ÇÅ])
             √ó (Œì ‚ä©‚Çó p‚ÇÅ ‚â° r‚ÇÅ ‚à∑ U.wk id F / [F] id (wf ‚ä¢F))
             √ó (Œì ‚ä©‚Çó p‚ÇÇ ‚â° r‚ÇÇ ‚à∑ U.wk (lift id) G [ p‚ÇÅ ]‚ÇÄ / [G] id (wf ‚ä¢F) [p‚ÇÅ])
    [Œ£]-prop
      ùï® t r Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
      (prod‚Çô {t = p‚ÇÅ} {u = p‚ÇÇ}) (ne y) =
      Lift a ‚ä•
    [Œ£]-prop
      ùï® t r Œì (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] ok)
      (ne x) (prod‚Çô {t = r‚ÇÅ} {u = r‚ÇÇ}) =
      Lift a ‚ä•
    [Œ£]-prop
      {p = p} {q = q} ùï® t r Œì
      (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] _) (ne x) (ne y) =
        Œì ‚ä¢ t ~ r ‚à∑ Œ£ ∑ p , q ‚ñ∑ F ‚ñπ G

    -- Logical relation definition
    data _‚ä©‚Çó_ (Œì : Con Term ‚Ñì) : Term ‚Ñì ‚Üí Set a where
      U·µ£  : ‚àÄ {A} ‚Üí Œì ‚ä©‚ÇÅU A ‚Üí Œì ‚ä©‚Çó A
      B·µ£  : ‚àÄ {A} W ‚Üí Œì ‚ä©‚ÇóB‚ü® W ‚ü© A ‚Üí Œì ‚ä©‚Çó A

    _‚ä©‚Çó_‚à∑_/_ : (Œì : Con Term ‚Ñì) (t A : Term ‚Ñì) ‚Üí Œì ‚ä©‚Çó A ‚Üí Set a
    Œì ‚ä©‚Çó t ‚à∑ A / U·µ£ p = Œì ‚ä©‚ÇÅU t ‚à∑U/ _‚ä©‚ÇÅU_.l< p
    Œì ‚ä©‚Çó t ‚à∑ A / B·µ£ BŒ£! Œ£A  = Œì ‚ä©‚ÇóŒ£ t ‚à∑ A / Œ£A

    _‚ä©‚Çó_‚â°_‚à∑_/_ : (Œì : Con Term ‚Ñì) (t u A : Term ‚Ñì) ‚Üí Œì ‚ä©‚Çó A ‚Üí Set a
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / U·µ£ (U·µ£ l‚Ä≤ l<) = Œì ‚ä©‚ÇÅU t ‚â° u ‚à∑U/ l<
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / B·µ£ BŒ£! Œ£A  = Œì ‚ä©‚ÇóŒ£ t ‚â° u ‚à∑ A / Œ£A

    kit : LogRelKit
    kit = Kit _‚ä©‚ÇÅU_ _‚ä©‚ÇóB‚ü®_‚ü©_
              _‚ä©‚Çó_ _‚ä©‚Çó_‚à∑_/_ _‚ä©‚Çó_‚â°_‚à∑_/_

open LogRel public
  using
    (U·µ£; B·µ£; U‚Çú; U‚Çú‚Çå;
     module _‚ä©‚ÇÅU_; module _‚ä©‚ÇÅU_‚à∑U/_; module _‚ä©‚ÇÅU_‚â°_‚à∑U/_;
     module _‚ä©‚ÇóB‚ü®_‚ü©_)

pattern Œ£‚Çú p d p‚â°p pProd prop =  p , d , p‚â°p , pProd , prop
pattern Œ£‚Çú‚Çå p r d d‚Ä≤ pProd rProd p‚âÖr [t] [u] prop = p , r , d , d‚Ä≤ , p‚âÖr , [t] , [u] , pProd , rProd , prop

pattern U·µ£‚Ä≤ a b = U·µ£ (U·µ£ a b)
pattern B·µ£‚Ä≤ W a b c d e f g h i = B·µ£ W (B·µ£ a b c d e f g h i)
pattern ùï®‚Ä≤ a b c d e f g h i = B·µ£‚Ä≤ BŒ£! a b c d e f g h i

mutual
  kit : TypeLevel ‚Üí LogRelKit
  kit ‚Ñì = LogRel.kit ‚Ñì kit-helper

  kit-helper : {n m : TypeLevel} ‚Üí m < n ‚Üí LogRelKit
  kit-helper {m = m} ‚â§‚Ä≤-refl = kit m
  kit-helper (‚â§‚Ä≤-step p) = kit-helper p


_‚ä©‚Ä≤‚ü®_‚ü©U_ : (Œì : Con Term ‚Ñì) (l : TypeLevel) (A : Term ‚Ñì) ‚Üí Set a
Œì ‚ä©‚Ä≤‚ü® l ‚ü©U A = Œì ‚ä©U A where open LogRelKit (kit l)

_‚ä©‚Ä≤‚ü®_‚ü©B‚ü®_‚ü©_ : (Œì : Con Term ‚Ñì) (l : TypeLevel) (W : BindingType) ‚Üí Term ‚Ñì ‚Üí Set a
Œì ‚ä©‚Ä≤‚ü® l ‚ü©B‚ü® W ‚ü© A = Œì ‚ä©B‚ü® W ‚ü© A where open LogRelKit (kit l)

-- Reducibility of types

_‚ä©‚ü®_‚ü©_ : (Œì : Con Term ‚Ñì) (l : TypeLevel) ‚Üí Term ‚Ñì ‚Üí Set a
Œì ‚ä©‚ü® l ‚ü© A = Œì ‚ä© A where open LogRelKit (kit l)

-- Equality of reducibile types

_‚ä©‚ü®_‚ü©_‚à∑_/_ : (Œì : Con Term ‚Ñì) (l : TypeLevel) (t A : Term ‚Ñì) ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Set a
Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / [A] = Œì ‚ä© t ‚à∑ A / [A] where open LogRelKit (kit l)

-- Equality of reducibile terms

_‚ä©‚ü®_‚ü©_‚â°_‚à∑_/_ : (Œì : Con Term ‚Ñì) (l : TypeLevel) (t u A : Term ‚Ñì) ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Set a
Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / [A] = Œì ‚ä© t ‚â° u ‚à∑ A / [A] where open LogRelKit (kit l)

